# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PoAoT0IC67nl2Yjjk6XajadcWpSkYMF5
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.axes as ax



from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

data = pd.read_csv('Salary_dataset.csv')

# Drop the missing values
data = data.dropna()


# training dataset and labels
train_input = np.array(data.YearsExperience[0:24]).reshape(24,1)
train_output = np.array(data.Salary[0:24]).reshape(24,1)

test_input = np.array(data.YearsExperience[24:31]).reshape(6,1)
test_output  = np.array(data.Salary[24:31]).reshape(6,1)

X_train, X_test, y_train, y_test = train_test_split(train_input, train_output, test_size=0.2, random_state=42)

# Create and train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the mean squared error to evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Plot the training data and the regression line
plt.scatter(train_input, train_output, label="Training Data")
plt.plot(train_input, model.predict(train_input), color='red', label="Regression Line")
plt.xlabel("Years of Experience")
plt.ylabel("Salary")
plt.legend()
plt.show()